<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/shared/components/maps/maps.component.spec.ts">
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/modules/login/login.component.spec.ts">
    <testCase name="LoginComponent should render the component" duration="249"/>
    <testCase name="LoginComponent should display login button" duration="73"/>
    <testCase name="LoginComponent should enable login button when username and password is set" duration="62"/>
    <testCase name="LoginComponent should not enable login button when only username is set" duration="58"/>
    <testCase name="LoginComponent form is invalid should return invalid login form if username is empty" duration="64"/>
    <testCase name="LoginComponent form is invalid should return invalid login form if password is not set" duration="27"/>
    <testCase name="LoginComponent form is invalid should not call login method when login button is clicked" duration="24"/>
    <testCase name="LoginComponent form is valid should return valid login form if username is set" duration="23"/>
    <testCase name="LoginComponent form is valid should return valid login form if password is set" duration="40"/>
    <testCase name="LoginComponent form is valid should call login method when login button is clicked" duration="36"/>
    <testCase name="LoginComponent form is valid should call the remove all method from the toast service in submit login" duration="21"/>
    <testCase name="LoginComponent form is valid should save the token in the storage service" duration="67"/>
    <testCase name="LoginComponent form is valid should navigate to the home page and show a success toast" duration="30"/>
    <testCase name="LoginComponent form is valid should show a toast with the error message" duration="59"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/shared/components/toast/toast.component.spec.ts">
    <testCase name="ToastComponent should render the component" duration="38"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/services/guards/login.guard.spec.ts">
    <testCase name="LoginGuard user not signed in should redirect to login" duration="43"/>
    <testCase name="LoginGuard user signed in should redirect to home page" duration="17"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/app.component.spec.ts">
    <testCase name="AppComponent should render the app" duration="138"/>
    <testCase name="AppComponent should display login page" duration="22"/>
    <testCase name="AppComponent isLoggedIn should return false if no token" duration="30"/>
    <testCase name="AppComponent isLoggedIn should return true if token" duration="24"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/shared/components/header/header.component.spec.ts">
    <testCase name="HeaderComponent should render the component" duration="306"/>
    <testCase name="HeaderComponent should navigate to the correct routes" duration="127"/>
    <testCase name="HeaderComponent should log the user out" duration="108"/>
    <testCase name="HeaderComponent should change the collapsed property of the navbar" duration="85"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/modules/register/register.component.spec.ts">
    <testCase name="RegisterComponent should render the component" duration="142"/>
    <testCase name="RegisterComponent form is not valid should not submit register" duration="72"/>
    <testCase name="RegisterComponent form is valid should enable register button when all fields are correctly set" duration="55"/>
    <testCase name="RegisterComponent form is valid should submit register" duration="51"/>
    <testCase name="RegisterComponent form is valid should call the remove all method from the toast service" duration="61"/>
    <testCase name="RegisterComponent form is valid should navigate to the login page and show a success toast" duration="39"/>
    <testCase name="RegisterComponent form is valid should show a toast with the error message" duration="22"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/services/toast/toast.service.spec.ts">
    <testCase name="ToastService should push a toast to the toasts array" duration="12"/>
    <testCase name="ToastService should remove a toast from array" duration="4"/>
    <testCase name="ToastService should remove all toasts from array" duration="2"/>
    <testCase name="ToastService should show a success toast" duration="2"/>
    <testCase name="ToastService should show an error toast" duration="3"/>
    <testCase name="ToastService should show an error toast with default message" duration="2"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/shared/components/date-picker/date-picker.component.spec.ts">
    <testCase name="DatePickerComponent should render the component" duration="83"/>
    <testCase name="DatePickerComponent onDateSelection should set fromDate and toDate to the date and emit them" duration="27"/>
    <testCase name="DatePickerComponent onDateSelection should set the toDate to the date and emit the endDate" duration="19"/>
    <testCase name="DatePickerComponent onDateSelection should set the fromDate to the date and emit the startDate" duration="36"/>
    <testCase name="DatePickerComponent date picker properties should set isInside to true if the toDate is defined and is inside the possible range" duration="15"/>
    <testCase name="DatePickerComponent date picker properties should set isHovered to false if the date is after the fromDate" duration="35"/>
    <testCase name="DatePickerComponent date picker properties should set isHovered to true if fromDate is defined, toDate is false, hoverDate is defined, the date is after fromDate and before hoverDate" duration="30"/>
    <testCase name="DatePickerComponent date picker properties should set isRange to true if the date is equal to fromDate" duration="27"/>
    <testCase name="DatePickerComponent date picker properties should set isRange to false if all conditions are not met" duration="31"/>
    <testCase name="DatePickerComponent date picker properties should set isRange to true if the date is equal to toDate" duration="12"/>
    <testCase name="DatePickerComponent date picker properties should set isInside to false if the toDate is defined but is outside the possible range" duration="38"/>
    <testCase name="DatePickerComponent date picker properties should validate and parse the date and return the input as a NgbDate" duration="37"/>
    <testCase name="DatePickerComponent date picker properties should validate and parse the date and return the currentValue" duration="17"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/services/booking/bookingdata.service.spec.ts">
    <testCase name="BookingDataService should fetch all cars" duration="33"/>
    <testCase name="BookingDataService should create a booking" duration="4"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/modules/booking/components/booking-card.component.spec.ts">
    <testCase name="BookingCardComponent should render the component" duration="76"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/modules/catalog/containers/catalog-details/catalog-details.component.spec.ts">
    <testCase name="CatalogDetailsComponent should render the component" duration="187"/>
    <testCase name="CatalogDetailsComponent should get the carId" duration="45"/>
    <testCase name="CatalogDetailsComponent should set the car" duration="50"/>
    <testCase name="CatalogDetailsComponent should set the start date" duration="48"/>
    <testCase name="CatalogDetailsComponent should set the end date" duration="62"/>
    <testCase name="CatalogDetailsComponent should return 0 if the start date or the end date are not set" duration="37"/>
    <testCase name="CatalogDetailsComponent should return the total price" duration="60"/>
    <testCase name="CatalogDetailsComponent should check if the dates are valid" duration="35"/>
    <testCase name="CatalogDetailsComponent should convert NgbDate to Date" duration="63"/>
    <testCase name="CatalogDetailsComponent should calculate the difference between two dates" duration="57"/>
    <testCase name="CatalogDetailsComponent bookCar should show a error toast if the dates are not valid" duration="43"/>
    <testCase name="CatalogDetailsComponent bookCar should book a car" duration="125"/>
    <testCase name="CatalogDetailsComponent bookCar should show a error toast if the booking fails" duration="51"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/modules/catalog/components/car-card/car-card.component.spec.ts">
    <testCase name="CarCardComponent should render the component" duration="105"/>
    <testCase name="CarCardComponent should emit the car when select car is called" duration="11"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/services/http/auth.service.spec.ts">
    <testCase name="AuthService should send an auth request to the backend" duration="17"/>
    <testCase name="AuthService should send register request to backend" duration="4"/>
    <testCase name="AuthService should refresh access token with refresh token" duration="4"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/services/guards/auth.guard.spec.ts">
    <testCase name="AuthGuard user not signed in should redirect to login" duration="47"/>
    <testCase name="AuthGuard user signed in should redirect to login" duration="3"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/modules/catalog/containers/catalog/catalog.component.spec.ts">
    <testCase name="CatalogComponent should render the component" duration="387"/>
    <testCase name="CatalogComponent should navigate to the catalog details page when a car selection is emitted" duration="41"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/shared/components/not-found/not-found.component.spec.ts">
    <testCase name="NotFoundComponent should create" duration="131"/>
    <testCase name="NotFoundComponent should render the component" duration="29"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/services/storage/storage.service.spec.ts">
    <testCase name="StorageService should be created" duration="14"/>
    <testCase name="StorageService should save auth response to session storage" duration="4"/>
    <testCase name="StorageService should retrieve authentication when present" duration="3"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/modules/booking/containers/booking/booking.component.spec.ts">
    <testCase name="BookingComponent should render the component" duration="155"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/modules/catalog/services/car-data.service.spec.ts">
    <testCase name="CarDataService should fetch all cars" duration="11"/>
    <testCase name="CarDataService should fetch a car by its id" duration="3"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/services/interceptor/http.interceptor.spec.ts">
    <testCase name="HttpInterceptor should be created" duration="12"/>
    <testCase name="HttpInterceptor should add content type to request" duration="5"/>
    <testCase name="HttpInterceptor should add access token to request if present" duration="3"/>
    <testCase name="HttpInterceptor should refresh token if initial request responded with 401" duration="3"/>
  </file>
  <file path="/home/thomas/Documents/Projects/se/se_frontend/src/app/modules/landing-page/landing-page.component.spec.ts">
    <testCase name="LandingPageComponent should create" duration="203"/>
  </file>
</testExecutions>